apiVersion: v1
kind: PersistentVolume
metadata:
  name: drupal7-drupal-files-volume
  namespace: web
  labels:
    volume: drupal7-drupal-files-volume
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  mountOptions:
    - vers=3,nolock
  nfs:
    server: "192.168.64.15"
    path: "/k8s"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: drupal7-drupal-files-volume-claim
  namespace: web
spec:
  resources:
    requests:
      storage: 10Gi
  accessModes:
    - ReadWriteMany
  selector:
    matchLabels:
      volume: drupal7-drupal-files-volume
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: drupal7-drupal
  namespace: web
  labels:
    app: drupal7-drupal
spec:
  replicas: 3
  minReadySeconds: 10
  strategy:
    rollingUpdate:
      maxSurge: 100
  selector:
    matchLabels:
      app: drupal7-drupal
  template:
    metadata:
      labels:
        app: drupal7-drupal
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: drupal7-drupal
        image: idstudios/drupal7-docker:plain
        env:
        - name: DRUPALDB_HOST
          value: pks-galera-haproxy
        - name: DRUPALDB_USER
          value: root
        - name: DRUPALDB_PASSWORD
          value: Fender2000
        - name: DRUPALDB_DATABASE
          value: drupaldb
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 10
        ports:
        - containerPort: 80
        volumeMounts:
          - name: drupal7-drupal-files-volume
            mountPath: "/var/www/html/sites/default/files"
      volumes:
      - name: drupal7-drupal-files-volume
        persistentVolumeClaim:
          claimName: drupal7-drupal-files-volume-claim
---
apiVersion: v1
kind: Service
metadata:
  name: drupal7-drupal-service
  namespace: web
spec:
  ports:
  - port: 80
    name: http
    protocol: TCP
    targetPort: 80
  selector:
    app: drupal7-drupal
